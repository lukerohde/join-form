
== SETUP
git clone git@github.com:union-software-cooperative/join-form.git

bundle install

rake db:create
rake db:migrate
rake db:seed

== DEPLOY

heroku create megaconnect
figaro heroku:set -e production
git push heroku master
# heroku run rake db:create # was complaining when running this, also tried heroku restart before attempting the migration (which worked)
heroku run rake db:migrate
heroku run rake db:seed 

== SECURE

# https://devcenter.heroku.com/articles/ssl-
mkdir keys
openssl genrsa -des3 -out keys/join.pass.key 2048
openssl rsa -in keys/join.pass.key -out keys/join.key
rm keys/join.pass.key
# used SA Unions details, make sure you don't put www in the hostname i.e. securejobssa.org.au
openssl req -nodes -new -key keys/join.key -out keys/join.csr
echo keys >> .gitignore
cat keys/join.csr

# setup certificate with heroku before configuring dns, because the cname changes
# purchased ssl from positive ssl when buying domain name
# name cheap, product list, activate, paste in CSR
# from name cheap setup mail catch all
# email verification method for ssl, followed steps after confirming mail catch all was working
vim keys/join.crt
# pasted in certificate
heroku addons:create ssl:endpoint
heroku certs:add keys/join.crt keys/join.key
# got cname tochigi-71066.herokussl.com

== FEATURE - alert on join or stall
A user can follow a join form
- When a user joins, user is notified on thanks (good if prior status was included)
- When a join stalls, no pay method, user is notifed after x minutes

== FEATURE - welcome message (includes debit information)
- Includes MemberID
- deduction amount Yes, frequency Yes, next debit, in api
- URL
- Only send on new join? When status changes to a1p, paying or leave without pay, on first payment? does from null to a1p/paying count. Have a welcomed flag, or history of mailing? 
- Welcome Scenarios
-- No match in database
-- Match potential or ex member
-- Match current member or member with payment problem, or someone who has paid recently
-- User is logged in and completes join			
-- There is no establishment fee and the user has paid their first fee by credit card, 
-- There is an establishment fee, which is waived to due past payment and they have paid their first fee by credit card
-- The user has paid a partial establishment fee by credit card (an amount greater than one whole fee)
-- The user has paid their entire establishment fee by credit card
-- There is no establishment fee and the user has provided bank details and will be charged their first fee on a day of their choosing, which is a working day
-- There is no establishment fee and the user has provided bank details and will be charged their first fee on a day of their choosing, which isn't a working day
-- There is an establishment fee, which is waived and the user has provided bank details and will be charged their first fee on a day of their choosing, which isn't a working day
-- There is an establishment fee, which is partially waived and the user has provided bank details and will be charged on a day of their choosing and will not be charged until their advanced fee has elapsed.
-- There is an establishment fee, which is not waived and the user has provided bank details and charged on the day of their choosing and not be charged again until their advanced fee has elapsed.

== FEATURE - user can specify their next debit day


== TODO Got an email in use error when attempting to match a person which had too few details, but was in the join system?  Also got errors on overjoin join show?  


== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
